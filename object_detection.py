# -*- coding: utf-8 -*-
"""Object Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_Zrn0dle99zmQnTHTXS8T3wr1YJw6Knu
"""

import torch
from PIL import Image
import numpy as np
import cv2
from time import sleep

# Load the YOLOv5 model
print("Loading the YOLOv5 model...")
model = torch.hub.load('ultralytics/yolov5', 'yolov5n')  # Use YOLOv5n for efficiency on Raspberry Pi
print("MODEL LOADED ✅ ✅")

# Function to calculate Euclidean distance between two points
def calculate_distance(center1, center2):
    return np.sqrt((center2[0] - center1[0]) ** 2 + (center2[1] - center1[1]) ** 2)

# Main function to capture image and run object detection
def capture_and_detect():
    # Initialize the camera
    print("Initializing the camera...")
    cap = cv2.VideoCapture(0)  # Access the camera (0 for default camera)
    if not cap.isOpened():
        print("Error: Camera not accessible")
        return

    # Give the camera time to adjust
    sleep(2)

    # Capture a single frame
    ret, frame = cap.read()
    if not ret:
        print("Error: Unable to capture image")
        cap.release()
        return

    # Save the captured frame as an image
    image_path = "captured_image.jpg"
    cv2.imwrite(image_path, frame)
    print(f"Image captured and saved as {image_path}")
    cap.release()

    # Load the image using PIL
    img = Image.open(image_path)

    # Perform object detection
    results = model(img)

    print("Detection Results:")

    # Extract bounding boxes, confidence scores, and class labels
    xywh = results.xywh[0].cpu().numpy()  # Bounding boxes (center_x, center_y, width, height)
    conf = results.pandas().xywh[0]["confidence"] * 100  # Confidence scores as percentages
    class_ids = results.pandas().xywh[0]["class"].to_numpy()  # Class IDs
    class_labels = [results.names[int(i)] for i in class_ids]  # Class labels from the names

    # Print the results for each bounding box
    for i in range(len(xywh)):
        # Extract bounding box information
        center_x, center_y, width, height = xywh[i]
        class_label = class_labels[i]
        confidence_score = conf[i]

        # Print the results
        print(f"\nBounding Box {i+1}:")
        print(f"  Class: {class_label}")
        print(f"  Center Coordinates: ({center_x:.2f}, {center_y:.2f})")
        print(f"  Size: Width={width:.2f}, Height={height:.2f}")
        print(f"  Confidence: {confidence_score:.2f}%")
        print('-' * 50)

    # Calculate relative distances between bounding boxes
    print("\nRelative Distances Between Bounding Boxes:")
    for i in range(len(xywh)):
        for j in range(i + 1, len(xywh)):
            center1 = (xywh[i][0], xywh[i][1])  # Center of bounding box i
            center2 = (xywh[j][0], xywh[j][1])  # Center of bounding box j
            distance = calculate_distance(center1, center2)
            print(f"Distance between Bounding Box {i+1} and Bounding Box {j+1}: {distance:.2f} pixels")

    # Display the detection results
    results.show()

# Run the capture and detection function
capture_and_detect()